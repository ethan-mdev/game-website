---
// Forum Thread View Page
import "../../../styles/global.css";
import Navbar from "../../../components/Navbar.astro";
import Footer from "../../../components/Footer.astro";
import { validateSession } from "../../../lib/session";

export const prerender = false;

const user = await validateSession(Astro.request);
const threadId = Astro.params.id;
---

<!doctype html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width" />
  <link rel="icon" href="/icon-512-square.png" />
  <title>Thread - Game Forums</title>
</head>
<body class="bg-neutral-900 text-gray-100 font-sans min-h-screen">
  <Navbar currentPage="forum" />
  
  <div class="container mx-auto px-4 py-8 max-w-6xl">
    <!-- Breadcrumb Navigation -->
    <div class="mb-6">
      <div class="flex items-center gap-2 text-sm flex-wrap" id="breadcrumb">
        <a href="/forum" class="text-purple-400 hover:text-purple-300">Forums</a>
        <span class="text-gray-600">/</span>
        <span class="text-gray-400">Loading...</span>
      </div>
    </div>

    <!-- Thread Header -->
    <div class="rounded-xl bg-neutral-900/80 ring-1 ring-neutral-800 mb-6">
      <div class="bg-gradient-to-r from-purple-500/10 to-transparent p-6 rounded-t-xl">
        <div class="flex items-start justify-between gap-4">
          <div class="flex-1">
            <div class="flex items-center gap-2 mb-2 flex-wrap" id="threadBadges"></div>
            <h1 class="text-3xl font-bold text-purple-400 mb-2" id="threadTitle">Loading...</h1>
            <div class="flex items-center gap-4 text-sm text-gray-400" id="threadMeta"></div>
          </div>
          
          {user?.roles && (user.roles.some(r => r.toUpperCase() === 'MOD') || user.roles.some(r => r.toUpperCase() === 'ADMIN')) && (
            <div class="relative z-50">
              <button 
                id="modMenuBtn"
                class="px-4 py-2 bg-red-500/20 hover:bg-red-500/30 text-red-400 rounded-lg transition flex items-center gap-2"
              >
                <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M10 6a2 2 0 110-4 2 2 0 010 4zM10 12a2 2 0 110-4 2 2 0 010 4zM10 18a2 2 0 110-4 2 2 0 010 4z"/>
                </svg>
                Moderate
              </button>
              
              <div id="modMenu" style="display: none;" class="absolute right-0 mt-2 w-48 bg-neutral-800 ring-1 ring-neutral-700 rounded-lg shadow-xl z-50">
                <button data-action="pin" class="w-full px-4 py-2 text-left hover:bg-neutral-700 rounded-t-lg text-gray-200">📌 Pin Thread</button>
                <button data-action="unpin" class="w-full px-4 py-2 text-left hover:bg-neutral-700 text-gray-200">📍 Unpin Thread</button>
                <button data-action="lock" class="w-full px-4 py-2 text-left hover:bg-neutral-700 text-gray-200">🔒 Lock Thread</button>
                <button data-action="unlock" class="w-full px-4 py-2 text-left hover:bg-neutral-700 text-gray-200">🔓 Unlock Thread</button>
                <button data-action="delete" class="w-full px-4 py-2 text-left hover:bg-neutral-700 text-red-400 rounded-b-lg">🗑️ Delete Thread</button>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>

    <!-- Posts Container -->
    <div id="postsContainer" class="space-y-6 mb-6">
      <div class="text-center py-8 text-gray-400">
        <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-purple-400"></div>
        <p class="mt-2">Loading posts...</p>
      </div>
    </div>

    <!-- Pagination -->
    <div id="paginationContainer" class="mb-6"></div>

    <!-- Reply Form -->
    <div id="replySection" class="rounded-xl bg-neutral-900/80 ring-1 ring-neutral-800 p-6">
      {user ? (
        <>
          <h2 class="text-xl font-bold text-purple-400 mb-4">Post a Reply</h2>
          <form id="replyForm">
          <!-- BBCode Toolbar -->
          <div class="flex items-center space-x-1 p-2 bg-neutral-800/50 rounded-t-lg border border-neutral-700 border-b-0">
            <button type="button" data-bbcode="b" class="p-2 text-gray-400 hover:text-gray-200 hover:bg-neutral-700 rounded transition-colors font-bold text-sm" title="Bold">
              <span class="font-bold">B</span>
            </button>
            <button type="button" data-bbcode="i" class="p-2 text-gray-400 hover:text-gray-200 hover:bg-neutral-700 rounded transition-colors italic text-sm" title="Italic">
              <span class="italic">I</span>
            </button>
            <button type="button" data-bbcode="u" class="p-2 text-gray-400 hover:text-gray-200 hover:bg-neutral-700 rounded transition-colors" title="Underline">
              <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 16 16"><path d="M5.313 3.136h-1.23V9.54c0 2.105 1.47 3.623 3.917 3.623s3.917-1.518 3.917-3.623V3.136h-1.23v6.323c0 1.49-.978 2.57-2.687 2.57-1.709 0-2.687-1.08-2.687-2.57V3.136zM12.5 15h-9v-1h9v1z"/></svg>
            </button>
            <div class="w-px h-6 bg-neutral-600"></div>
            <button type="button" data-bbcode="code" class="p-2 text-gray-400 hover:text-gray-200 hover:bg-neutral-700 rounded transition-colors" title="Code">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4"/></svg>
            </button>
            <button type="button" data-bbcode="url" class="p-2 text-gray-400 hover:text-gray-200 hover:bg-neutral-700 rounded transition-colors" title="Link">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"/></svg>
            </button>
            <button type="button" data-bbcode="img" class="p-2 text-gray-400 hover:text-gray-200 hover:bg-neutral-700 rounded transition-colors" title="Image">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>
            </button>
          </div>
          
          <textarea 
            id="replyContent"
            rows="6"
            required
            class="w-full px-4 py-3 bg-neutral-800 border border-neutral-700 rounded-b-lg focus:outline-none focus:ring-2 focus:ring-purple-500 resize-none mb-4"
            placeholder="Write your reply... Use the toolbar above for formatting."
          ></textarea>
          <div class="flex justify-end">
            <button 
              type="submit"
              class="px-6 py-2 bg-purple-500 hover:bg-purple-600 text-white font-semibold rounded-lg transition"
            >
              Post Reply
            </button>
          </div>
        </form>
        </>
      ) : (
        <div class="text-center py-8">
          <svg class="w-12 h-12 mx-auto mb-3 text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
          </svg>
          <h3 class="text-lg font-semibold text-gray-300 mb-2">Login to Reply</h3>
          <p class="text-gray-400 mb-4">You must be logged in to post a reply.</p>
          <a 
            href="/login" 
            class="inline-block px-6 py-2 bg-purple-500 hover:bg-purple-600 text-white font-semibold rounded-lg transition"
          >
            Login / Register
          </a>
        </div>
      )}
    </div>
  </div>

  <!-- User Sanction Modal -->
  {user?.roles && (user.roles.some(r => r.toUpperCase() === 'MOD') || user.roles.some(r => r.toUpperCase() === 'ADMIN')) && (
    <div id="sanctionModal" style="display: none;" class="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
      <div class="bg-neutral-800 rounded-xl max-w-md w-full p-6 ring-1 ring-neutral-700">
        <h3 class="text-2xl font-bold text-purple-400 mb-4">Sanction User</h3>
        
        <form id="sanctionForm">
          <input type="hidden" id="sanctionUserId" />
          
          <div class="mb-4">
            <label class="block text-sm font-semibold mb-2">User</label>
            <div id="sanctionUserName" class="px-4 py-2 bg-neutral-700 rounded-lg text-gray-300"></div>
          </div>

          <div class="mb-4">
            <label class="block text-sm font-semibold mb-2">Sanction Type</label>
            <select id="sanctionType" class="w-full px-4 py-2 bg-neutral-700 border border-neutral-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500" required>
              <option value="timeout">Timeout (Temporary Ban)</option>
              <option value="ban">Permanent Ban</option>
            </select>
          </div>

          <div id="durationField" class="mb-4">
            <label for="sanctionDuration" class="block text-sm font-semibold mb-2">Duration (Hours)</label>
            <input 
              type="number" 
              id="sanctionDuration"
              min="1"
              max="720"
              value="24"
              class="w-full px-4 py-2 bg-neutral-700 border border-neutral-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500"
              required
            />
            <p class="text-xs text-gray-400 mt-1">Max: 720 hours (30 days)</p>
          </div>

          <div class="mb-4">
            <label for="sanctionReason" class="block text-sm font-semibold mb-2">Reason</label>
            <textarea 
              id="sanctionReason"
              rows="3"
              maxlength="500"
              class="w-full px-4 py-2 bg-neutral-700 border border-neutral-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 resize-none"
              placeholder="Reason for sanction..."
              required
            ></textarea>
          </div>

          <div class="flex gap-3">
            <button 
              type="submit"
              class="flex-1 px-4 py-2 bg-red-500 hover:bg-red-600 text-white font-semibold rounded-lg transition"
            >
              Apply Sanction
            </button>
            <button 
              type="button"
              onclick="closeSanctionModal()"
              class="flex-1 px-4 py-2 bg-neutral-700 hover:bg-neutral-600 text-gray-300 font-semibold rounded-lg transition"
            >
              Cancel
            </button>
          </div>
        </form>
      </div>
    </div>
  )}

  <!-- Edit Post Modal -->
  <div id="edit-post-modal" class="fixed inset-0 z-50 bg-black/50 backdrop-blur-sm flex items-center justify-center p-4 hidden">
    <div class="bg-neutral-900 rounded-xl border border-neutral-700 p-6 w-full max-w-2xl">
      <h3 class="text-lg font-semibold mb-4">Edit Post</h3>
      <div class="mb-6">
        <textarea 
          id="edit-post-content"
          rows="8"
          class="w-full px-4 py-2 bg-neutral-800 border border-neutral-700 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 resize-none text-gray-200"
          placeholder="Edit your post content..."
        ></textarea>
      </div>
      <div class="flex gap-3">
        <button 
          id="cancel-edit-post"
          class="flex-1 px-4 py-2 rounded-lg border border-neutral-700 text-gray-300 hover:bg-neutral-800 transition-colors"
        >
          Cancel
        </button>
        <button 
          id="confirm-edit-post"
          class="flex-1 px-4 py-2 rounded-lg bg-purple-500 hover:bg-purple-600 text-white transition-colors"
        >
          Save Changes
        </button>
      </div>
    </div>
  </div>

  <!-- Delete Post Modal -->
  <div id="delete-post-modal" class="fixed inset-0 z-50 bg-black/50 backdrop-blur-sm flex items-center justify-center p-4 hidden">
    <div class="bg-neutral-900 rounded-xl border border-neutral-700 p-6 w-full max-w-md">
      <h3 class="text-lg font-semibold mb-4 text-red-400">Delete Post</h3>
      <p class="text-gray-400 mb-6">Are you sure you want to delete this post? This action cannot be undone.</p>
      <div class="flex gap-3">
        <button 
          id="cancel-delete-post"
          class="flex-1 px-4 py-2 rounded-lg border border-neutral-700 text-gray-300 hover:bg-neutral-800 transition-colors"
        >
          Cancel
        </button>
        <button 
          id="confirm-delete-post"
          class="flex-1 px-4 py-2 rounded-lg bg-red-500 hover:bg-red-600 text-white transition-colors"
        >
          Delete Post
        </button>
      </div>
    </div>
  </div>

  <!-- Success Message Modal -->
  <div id="success-modal" class="fixed inset-0 z-50 bg-black/50 backdrop-blur-sm flex items-center justify-center p-4 hidden">
    <div class="bg-neutral-900 rounded-xl border border-neutral-700 p-6 w-full max-w-md">
      <div class="flex items-center gap-3 mb-4">
        <div class="w-10 h-10 rounded-full bg-green-500/20 flex items-center justify-center">
          <svg class="w-6 h-6 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
          </svg>
        </div>
        <h3 class="text-lg font-semibold text-green-400">Success</h3>
      </div>
      <p id="success-message" class="text-gray-300 mb-6"></p>
      <button 
        id="close-success-modal"
        class="w-full px-4 py-2 rounded-lg bg-green-500 hover:bg-green-600 text-white transition-colors"
      >
        OK
      </button>
    </div>
  </div>

  <!-- Error Message Modal -->
  <div id="error-modal" class="fixed inset-0 z-50 bg-black/50 backdrop-blur-sm flex items-center justify-center p-4 hidden">
    <div class="bg-neutral-900 rounded-xl border border-neutral-700 p-6 w-full max-w-md">
      <div class="flex items-center gap-3 mb-4">
        <div class="w-10 h-10 rounded-full bg-red-500/20 flex items-center justify-center">
          <svg class="w-6 h-6 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </div>
        <h3 class="text-lg font-semibold text-red-400">Error</h3>
      </div>
      <p id="error-message" class="text-gray-300 mb-6"></p>
      <button 
        id="close-error-modal"
        class="w-full px-4 py-2 rounded-lg bg-red-500 hover:bg-red-600 text-white transition-colors"
      >
        OK
      </button>
    </div>
  </div>

  <!-- Delete Thread Confirmation Modal -->
  <div id="delete-thread-modal" class="fixed inset-0 z-50 bg-black/50 backdrop-blur-sm flex items-center justify-center p-4 hidden">
    <div class="bg-neutral-900 rounded-xl border border-neutral-700 p-6 w-full max-w-md">
      <h3 class="text-lg font-semibold mb-4 text-red-400">Delete Thread</h3>
      <p class="text-gray-400 mb-6">Are you sure you want to delete this entire thread? This action cannot be undone and will remove all posts in this thread.</p>
      <div class="flex gap-3">
        <button 
          id="cancel-delete-thread"
          class="flex-1 px-4 py-2 rounded-lg border border-neutral-700 text-gray-300 hover:bg-neutral-800 transition-colors"
        >
          Cancel
        </button>
        <button 
          id="confirm-delete-thread"
          class="flex-1 px-4 py-2 rounded-lg bg-red-500 hover:bg-red-600 text-white transition-colors"
        >
          Delete Thread
        </button>
      </div>
    </div>
  </div>

  <!-- Sanction Confirmation Modal -->
  <div id="sanction-confirm-modal" class="fixed inset-0 z-50 bg-black/50 backdrop-blur-sm flex items-center justify-center p-4 hidden">
    <div class="bg-neutral-900 rounded-xl border border-red-700 p-6 w-full max-w-md">
      <div class="flex items-center gap-3 mb-4">
        <div class="w-12 h-12 rounded-full bg-red-500/20 flex items-center justify-center">
          <svg class="w-6 h-6 text-red-400" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M13.477 14.89A6 6 0 015.11 6.524l8.367 8.368zm1.414-1.414L6.524 5.11a6 6 0 018.367 8.367zM18 10a8 8 0 11-16 0 8 8 0 0116 0z" clip-rule="evenodd"/>
          </svg>
        </div>
        <h3 class="text-lg font-semibold text-red-400" id="sanction-confirm-title">Confirm Sanction</h3>
      </div>
      <div class="bg-red-500/10 border border-red-500/30 rounded-lg p-4 mb-4">
        <p class="text-red-200 text-sm mb-2">
          You are about to <strong id="sanction-action-type">timeout</strong> user: 
          <strong id="sanction-confirm-user" class="text-red-400"></strong>
        </p>
        <div id="sanction-duration-display" class="text-red-200 text-sm mb-2"></div>
        <p class="text-red-200 text-sm">
          <strong>Reason:</strong> <span id="sanction-confirm-reason"></span>
        </p>
      </div>
      <p class="text-gray-400 text-sm mb-6">This action will restrict the user's ability to post in the forums.</p>
      <div class="flex gap-3">
        <button 
          id="cancel-sanction-confirm"
          class="flex-1 px-4 py-2 rounded-lg border border-neutral-700 text-gray-300 hover:bg-neutral-800 transition-colors"
        >
          Cancel
        </button>
        <button 
          id="confirm-sanction-confirm"
          class="flex-1 px-4 py-2 rounded-lg bg-red-500 hover:bg-red-600 text-white font-semibold transition-colors"
        >
          Apply Sanction
        </button>
      </div>
    </div>
  </div>

  <!-- Sanction Success Modal -->
  <div id="sanction-success-modal" class="fixed inset-0 z-50 bg-black/50 backdrop-blur-sm flex items-center justify-center p-4 hidden">
    <div class="bg-neutral-900 rounded-xl border border-neutral-700 p-6 w-full max-w-md">
      <div class="flex items-center gap-3 mb-4">
        <div class="w-12 h-12 rounded-full bg-green-500/20 flex items-center justify-center">
          <svg class="w-6 h-6 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
        </div>
        <h3 class="text-lg font-semibold text-green-400">Sanction Applied</h3>
      </div>
      <p id="sanction-success-message" class="text-gray-300 mb-6"></p>
      <div class="bg-purple-500/10 border border-purple-500/30 rounded-lg p-4 mb-6">
        <div class="flex items-start gap-2">
          <svg class="w-5 h-5 text-purple-400 mt-0.5 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"/>
          </svg>
          <p class="text-purple-200 text-sm">The user has been notified and their posting privileges have been restricted.</p>
        </div>
      </div>
      <button 
        id="close-sanction-success"
        class="w-full px-4 py-2 rounded-lg bg-green-500 hover:bg-green-600 text-white transition-colors"
      >
        OK
      </button>
    </div>
  </div>

  <Footer />

  <script define:vars={{ threadId, user }}>
    let currentPage = 1;
    let threadData = null;
    let postsData = [];

    async function loadThread() {
      try {
        const res = await fetch(`/forum/threads/${threadId}`);
        const data = await res.json();
        
        if (!data.ok) throw new Error(data.error);

        threadData = data.thread;
        
        // Update breadcrumb
        document.getElementById('breadcrumb').innerHTML = `
          <a href="/forum" class="text-purple-400 hover:text-purple-300">Forums</a>
          <span class="text-gray-600">/</span>
          <a href="/forum/category/${threadData.category_id}" class="text-purple-400 hover:text-purple-300">Category</a>
          <span class="text-gray-600">/</span>
          <span class="text-gray-400">${threadData.title}</span>
        `;

        // Update title
        document.getElementById('threadTitle').textContent = threadData.title;

        // Update badges
        let badges = '';
        if (threadData.pinned) {
          badges += '<span class="px-2 py-1 bg-purple-500/20 text-purple-400 text-xs font-semibold rounded">Pinned</span>';
        }
        if (threadData.locked) {
          badges += '<span class="px-2 py-1 bg-red-500/20 text-red-400 text-xs font-semibold rounded">Locked</span>';
        }
        
        // Add prefix badges
        if (threadData.prefixes) {
          const prefixes = threadData.prefixes.split('|').filter(p => p.trim());
          badges += prefixes.map(prefix => getPrefixBadge(prefix)).join(' ');
        }
        
        document.getElementById('threadBadges').innerHTML = badges;

        // Update meta
        const createdDate = new Date(threadData.created_at);
        document.getElementById('threadMeta').innerHTML = `
          <span>Started by <span class="text-purple-400">${threadData.author_name}</span></span>
          <span>•</span>
          <span>${createdDate.toLocaleDateString()}</span>
          <span>•</span>
          <span>${threadData.view_count} views</span>
          <span>•</span>
          <span>${threadData.reply_count} replies</span>
        `;

        // Check if locked or if it's an announcement thread (only if user is logged in)
        if (user) {
          const isModerator = user.roles && Array.isArray(user.roles) && user.roles.some(r => r.toUpperCase() === 'MOD' || r.toUpperCase() === 'ADMIN');
          const isAdmin = user.roles && Array.isArray(user.roles) && user.roles.some(r => r.toUpperCase() === 'ADMIN');
          const replySection = document.getElementById('replySection');
          
          if (threadData.locked && !isModerator) {
            if (replySection) {
              replySection.innerHTML = `
                <div class="text-center py-8 text-gray-400">
                  <svg class="w-12 h-12 mx-auto mb-3 text-red-400" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z" clip-rule="evenodd"/>
                  </svg>
                  <p>This thread is locked. No new replies can be posted.</p>
                </div>
              `;
            }
          } else if (threadData.is_announcement && !isAdmin) {
            if (replySection) {
              replySection.innerHTML = `
                <div class="text-center py-8 text-gray-400">
                  <svg class="w-12 h-12 mx-auto mb-3 text-purple-400" fill="currentColor" viewBox="0 0 20 20">
                    <path d="M10 2a6 6 0 00-6 6v3.586l-.707.707A1 1 0 004 14h12a1 1 0 00.707-1.707L16 11.586V8a6 6 0 00-6-6zM10 18a3 3 0 01-3-3h6a3 3 0 01-3 3z"/>
                  </svg>
                  <p>This is an announcement thread. Only administrators can reply.</p>
                </div>
              `;
            }
          }
        }

        loadPosts();
      } catch (err) {
        console.error('Error loading thread:', err);
        alert('Failed to load thread');
        window.location.href = '/forum';
      }
    }

    async function loadPosts(page = 1) {
      currentPage = page;
      const container = document.getElementById('postsContainer');
      container.innerHTML = `
        <div class="text-center py-8 text-gray-400">
          <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-purple-400"></div>
          <p class="mt-2">Loading posts...</p>
        </div>
      `;

      try {
        const res = await fetch(`/forum/threads/${threadId}/posts?page=${page}&pageSize=10`);
        const data = await res.json();
        
        if (!data.ok) throw new Error(data.error);

        postsData = data.posts; // Store posts globally for quoting
        renderPosts(data.posts);
        renderPagination(data.page, data.pageSize, data.total);
        
        // Attach event listeners to buttons
        attachButtonListeners();
      } catch (err) {
        console.error('Error loading posts:', err);
        container.innerHTML = `
          <div class="text-center py-8 text-red-400">
            <p>Failed to load posts. Please try again.</p>
          </div>
        `;
      }
    }

    // Cache roles from API
    let rolesCache = null;
    
    async function loadRoles() {
      if (rolesCache) return rolesCache;
      
      try {
        const res = await fetch('/api/forum/roles');
        const data = await res.json();
        if (data.ok) {
          rolesCache = data.roles;
          return rolesCache;
        }
      } catch (err) {
        console.error('Failed to load roles:', err);
      }
      return [];
    }
    
    function getRoleStyle(color) {
      if (!color) return 'bg-gray-500/20 text-gray-400';
      
      // Check for special gradient keywords
      const gradientMap = {
        'gradient-rainbow': 'role-gradient-rainbow',
        'gradient-fire': 'role-gradient-fire',
        'gradient-ocean': 'role-gradient-ocean',
        'gradient-toxic': 'role-gradient-toxic',
        'gradient-sunset': 'role-gradient-sunset',
        'gradient-purple-pink': 'role-gradient-purple-pink',
      };
      
      // Check for animation keywords
      const animationMap = {
        'glow': 'role-glow',
        'shimmer': 'role-shimmer',
      };
      
      let classes = '';
      let hasGradient = false;
      
      // Check if color contains gradient keywords
      for (const [keyword, className] of Object.entries(gradientMap)) {
        if (color.includes(keyword)) {
          classes += className + ' ';
          hasGradient = true;
        }
      }
      
      // Check if color contains animation keywords
      for (const [keyword, className] of Object.entries(animationMap)) {
        if (color.includes(keyword)) {
          classes += className + ' ';
        }
      }
      
      // If it's a gradient/animation, return just the special classes
      if (hasGradient) {
        return classes.trim();
      }
      
      // Otherwise treat as regular Tailwind color
      return color;
    }
    
    function getRoleBadges(rolesString, postCount = 0) {
      const roleNames = rolesString ? rolesString.split(',').map(r => r.trim().toUpperCase()) : [];
      let badges = '';
      
      // Render role badges from database
      roleNames.forEach(roleName => {
        if (roleName === 'MEMBER') return; // Skip MEMBER role
        
        const roleData = rolesCache?.find(r => r.name.toUpperCase() === roleName);
        const style = roleData ? getRoleStyle(roleData.color) : 'bg-gray-500/20 text-gray-400';
        
        badges += `<span class="inline-block px-2 py-0.5 text-xs font-semibold rounded ${style}">${roleName}</span>`;
      });
      
      // Post count-based rank (automatic)
      const rank = getRankForPostCount(postCount);
      badges += `<span class="inline-block px-2 py-0.5 ${rank.color} text-xs font-semibold rounded">${rank.name.toUpperCase()}</span>`;
      
      return badges;
    }
    
    // Rank system based on post count
    const FORUM_RANKS = [
      { name: 'Newbie', minPosts: 0, color: 'bg-gray-500/20 text-gray-400' },
      { name: 'Member', minPosts: 10, color: 'bg-blue-500/20 text-blue-400' },
      { name: 'Regular', minPosts: 50, color: 'bg-green-500/20 text-green-400' },
      { name: 'Veteran', minPosts: 100, color: 'bg-cyan-500/20 text-cyan-400' },
      { name: 'Elder', minPosts: 250, color: 'bg-purple-500/20 text-purple-400' },
      { name: 'Legend', minPosts: 500, color: 'bg-purple-500/20 text-purple-400' },
      { name: 'Hero', minPosts: 1000, color: 'bg-violet-500/20 text-violet-400' },
      { name: 'Champion', minPosts: 2500, color: 'bg-pink-500/20 text-pink-400' },
    ];
    
    function getRankForPostCount(postCount) {
      for (let i = FORUM_RANKS.length - 1; i >= 0; i--) {
        if (postCount >= FORUM_RANKS[i].minPosts) {
          return FORUM_RANKS[i];
        }
      }
      return FORUM_RANKS[0];
    }

    function renderPosts(posts) {
      const container = document.getElementById('postsContainer');
      
      if (!posts || posts.length === 0) {
        container.innerHTML = `
          <div class="rounded-xl bg-neutral-900/80 ring-1 ring-neutral-800 p-8 text-center text-gray-400">
            <p>No posts found.</p>
          </div>
        `;
        return;
      }

      container.innerHTML = posts.map((post, index) => {
        const createdDate = new Date(post.created_at);
        const editedDate = post.edited_at ? new Date(post.edited_at) : null;
        
        return `
          <div class="rounded-xl bg-neutral-900/80 ring-1 ring-neutral-800 overflow-hidden">
            <div class="flex flex-col md:flex-row">
              <!-- Author Sidebar -->
              <div class="w-full md:w-48 bg-neutral-800/50 p-6 border-b md:border-b-0 md:border-r border-neutral-700">
                <div class="text-center">
                  ${post.profile_image ? 
                    `<img src="/avatars/${post.profile_image}" alt="${post.author_name}" class="w-16 h-16 mx-auto mb-3 rounded-full object-cover ring-2 ring-purple-500/50" />` :
                    `<div class="w-16 h-16 mx-auto mb-3 bg-gradient-to-br from-purple-500 to-purple-600 rounded-full flex items-center justify-center text-white font-bold text-xl">
                      ${post.author_name.charAt(0).toUpperCase()}
                    </div>`
                  }
                  <h3 class="font-semibold text-purple-400 mb-1">${post.author_name}</h3>
                  <div class="flex flex-col items-center gap-1 mt-2">
                    ${post.is_op ? '<span class="inline-block px-2 py-0.5 bg-purple-500/20 text-purple-400 text-xs rounded font-semibold">OP</span>' : ''}
                    ${getRoleBadges(post.author_roles, post.author_post_count || 0)}
                  </div>
                  <div class="mt-3 text-xs text-gray-400">
                    <div>Posts: ${post.author_post_count || 0}</div>
                    <div>Joined: ${post.user_joined_at ? new Date(post.user_joined_at).toLocaleDateString('en-US', { month: 'short', year: 'numeric' }) : 'Unknown'}</div>
                  </div>
                </div>
              </div>

              <!-- Post Content -->
              <div class="flex-1 p-6">
                <div class="flex items-start justify-between mb-4">
                  <div class="text-sm text-gray-400">
                    Posted ${formatDate(createdDate)}
                    ${editedDate ? `<span class="ml-2">(edited ${formatDate(editedDate)})</span>` : ''}
                  </div>
                  <div class="flex items-center gap-2">
                    ${user && (post.author_id === user.id || (user.roles && Array.isArray(user.roles) && user.roles.some(r => r.toUpperCase() === 'ADMIN'))) ? `
                      <button class="edit-btn text-xs px-3 py-1 bg-purple-500/20 hover:bg-purple-500/30 text-purple-400 rounded transition flex items-center gap-1" data-post-id="${post.id}" data-content="${escapeHtml(post.content)}">
                        <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"/></svg>
                        Edit
                      </button>
                    ` : ''}
                    ${user && !post.is_op && (post.author_id === user.id || (user.roles && Array.isArray(user.roles) && (user.roles.some(r => r.toUpperCase() === 'MOD') || user.roles.some(r => r.toUpperCase() === 'ADMIN')))) ? `
                      <button class="delete-btn text-xs px-3 py-1 bg-red-500/20 hover:bg-red-500/30 text-red-400 rounded transition flex items-center gap-1" data-post-id="${post.id}">
                        <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/></svg>
                        Delete
                      </button>
                    ` : ''}
                    ${user && user.roles && Array.isArray(user.roles) && (user.roles.some(r => r.toUpperCase() === 'MOD') || user.roles.some(r => r.toUpperCase() === 'ADMIN')) && post.author_id !== user.id ? `
                      <button onclick="openSanctionModal('${post.author_id}', '${post.author_name}')" class="text-xs px-2 py-1 bg-red-500/20 hover:bg-red-500/30 text-red-400 rounded transition">
                        Sanction User
                      </button>
                    ` : ''}
                    <div class="text-sm text-gray-500">#${(currentPage - 1) * 10 + index + 1}</div>
                  </div>
                </div>
                
                <div class="prose prose-invert max-w-none">
                  <div class="text-gray-200">${parseBBCode(post.content)}</div>
                </div>
              </div>
            </div>
          </div>
        `;
      }).join('');
    }

    // BBCode parser (client-side version)
    function parseBBCode(text) {
      if (!text) return '';
      
      let html = escapeHtml(text);
      
      // [b]bold[/b]
      html = html.replace(/\[b\](.*?)\[\/b\]/gi, '<strong>$1</strong>');
      
      // [i]italic[/i]
      html = html.replace(/\[i\](.*?)\[\/i\]/gi, '<em>$1</em>');
      
      // [u]underline[/u]
      html = html.replace(/\[u\](.*?)\[\/u\]/gi, '<u>$1</u>');
      
      // [quote]text[/quote] or [quote=username]text[/quote]
      html = html.replace(/\[quote=["']?([^"\]]+)["']?\](.*?)\[\/quote\]/gis, 
        '<blockquote class="border-l-4 border-sky-400 pl-4 py-2 my-3 bg-neutral-800/50"><div class="text-xs text-sky-400 mb-1">Quote from $1:</div><div class="text-gray-300">$2</div></blockquote>');
      html = html.replace(/\[quote\](.*?)\[\/quote\]/gis, 
        '<blockquote class="border-l-4 border-gray-500 pl-4 py-2 my-3 bg-neutral-800/50 text-gray-300">$1</blockquote>');
      
      // [code]code[/code]
      html = html.replace(/\[code\](.*?)\[\/code\]/gis, 
        '<pre class="bg-neutral-800 border border-neutral-700 rounded p-3 my-3 overflow-x-auto"><code class="text-sm text-gray-300 font-mono">$1</code></pre>');
      
      // [url=link]text[/url] or [url]link[/url]
      html = html.replace(/\[url=["']?([^"\]]+)["']?\](.*?)\[\/url\]/gi, 
        '<a href="$1" class="text-sky-400 hover:text-sky-300 underline" target="_blank" rel="noopener noreferrer">$2</a>');
      html = html.replace(/\[url\](.*?)\[\/url\]/gi, 
        '<a href="$1" class="text-sky-400 hover:text-sky-300 underline" target="_blank" rel="noopener noreferrer">$1</a>');
      
      // [img]url[/img]
      html = html.replace(/\[img\](.*?)\[\/img\]/gi, 
        '<img src="$1" alt="User image" class="max-w-full h-auto rounded my-3 border border-neutral-700" loading="lazy" />');
      
      // Convert newlines to <br> tags
      html = html.replace(/\n/g, '<br>');
      
      return html;
    }

    function renderPagination(page, pageSize, total) {
      const totalPages = Math.ceil(total / pageSize);
      if (totalPages <= 1) {
        document.getElementById('paginationContainer').innerHTML = '';
        return;
      }

      const container = document.getElementById('paginationContainer');
      let html = '<div class="flex justify-center gap-2">';
      
      html += `<button onclick="loadPosts(${page - 1})" ${page === 1 ? 'disabled' : ''} class="px-4 py-2 bg-neutral-800 hover:bg-neutral-700 disabled:opacity-50 disabled:cursor-not-allowed rounded-lg transition">Previous</button>`;
      
      for (let i = Math.max(1, page - 2); i <= Math.min(totalPages, page + 2); i++) {
        html += `<button onclick="loadPosts(${i})" class="px-4 py-2 ${i === page ? 'bg-purple-500 text-white' : 'bg-neutral-800 hover:bg-neutral-700'} rounded-lg transition">${i}</button>`;
      }
      
      html += `<button onclick="loadPosts(${page + 1})" ${page === totalPages ? 'disabled' : ''} class="px-4 py-2 bg-neutral-800 hover:bg-neutral-700 disabled:opacity-50 disabled:cursor-not-allowed rounded-lg transition">Next</button>`;
      html += '</div>';
      
      container.innerHTML = html;
    }

    function getPrefixBadge(prefix) {
      if (!prefix) return '';
      
      const prefixStyles = {
        // Community prefixes
        'Guide': 'bg-green-500/20 text-green-400 border-green-500/50',
        'Question': 'bg-blue-500/20 text-blue-400 border-blue-500/50',
        'Discussion': 'bg-purple-500/20 text-purple-400 border-purple-500/50',
        'PvP': 'bg-red-500/20 text-red-400 border-red-500/50',
        'PvE': 'bg-purple-500/20 text-purple-400 border-purple-500/50',
        'Bug': 'bg-red-500/20 text-red-400 border-red-500/50',
        'Suggestion': 'bg-teal-500/20 text-teal-400 border-teal-500/50',
        // Announcement prefixes
        'Hotfix': 'bg-red-500/20 text-red-400 border-red-500/50',
        'Event': 'bg-violet-500/20 text-violet-400 border-violet-500/50',
        'Balance': 'bg-indigo-500/20 text-indigo-400 border-indigo-500/50',
        'New Content': 'bg-green-500/20 text-green-400 border-green-500/50',
        'PvP Updates': 'bg-blue-500/20 text-blue-400 border-blue-500/50',
        'Performance': 'bg-purple-500/20 text-purple-400 border-purple-500/50',
        'Guild System': 'bg-violet-500/20 text-violet-400 border-violet-500/50',
        'Bug Fixes': 'bg-red-500/20 text-red-400 border-red-500/50',
        'Stability': 'bg-yellow-500/20 text-yellow-400 border-yellow-500/50',
        'Cosmetics': 'bg-pink-500/20 text-pink-400 border-pink-500/50',
        'Classes': 'bg-cyan-500/20 text-cyan-400 border-cyan-500/50',
        'Maintenance': 'bg-green-500/20 text-green-400 border-green-500/50'
      };
      
      const style = prefixStyles[prefix] || 'bg-gray-500/20 text-gray-400 border-gray-500/50';
      return `<span class="inline-block px-2 py-0.5 text-xs font-semibold rounded border ${style} ml-1">${prefix}</span>`;
    }

    function formatDate(date) {
      const now = new Date();
      const diff = now - date;
      const seconds = Math.floor(diff / 1000);
      const minutes = Math.floor(seconds / 60);
      const hours = Math.floor(minutes / 60);
      const days = Math.floor(hours / 24);

      if (days > 7) return date.toLocaleDateString() + ' ' + date.toLocaleTimeString();
      if (days > 0) return `${days}d ago`;
      if (hours > 0) return `${hours}h ago`;
      if (minutes > 0) return `${minutes}m ago`;
      return 'just now';
    }

    function escapeHtml(text) {
      const div = document.createElement('div');
      div.textContent = text;
      return div.innerHTML;
    }

    // Attach event listeners to post buttons
    function attachButtonListeners() {
      // Edit buttons
      document.querySelectorAll('.edit-btn').forEach(btn => {
        btn.addEventListener('click', () => {
          const postId = parseInt(btn.dataset.postId);
          const content = btn.dataset.content;
          window.editPost(postId, content);
        });
      });

      // Delete buttons
      document.querySelectorAll('.delete-btn').forEach(btn => {
        btn.addEventListener('click', () => {
          const postId = parseInt(btn.dataset.postId);
          window.deletePost(postId);
        });
      });
    }

    // Helper functions for modals
    function showModal(modalId) {
      const modal = document.getElementById(modalId);
      if (modal) {
        modal.classList.remove('hidden');
      }
    }

    function hideModal(modalId) {
      const modal = document.getElementById(modalId);
      if (modal) {
        modal.classList.add('hidden');
      }
    }

    function showSuccess(message) {
      document.getElementById('success-message').textContent = message;
      showModal('success-modal');
    }

    function showError(message) {
      document.getElementById('error-message').textContent = message;
      showModal('error-modal');
    }

    function showErrorModal(title, message) {
      document.getElementById('error-message').textContent = message;
      showModal('error-modal');
    }

    // Sanction confirmation modal
    function showSanctionConfirmModal(type, userName, reason, duration, onConfirm) {
      const modal = document.getElementById('sanction-confirm-modal');
      const actionType = type === 'timeout' ? 'timeout' : 'permanently ban';
      
      document.getElementById('sanction-action-type').textContent = actionType;
      document.getElementById('sanction-confirm-user').textContent = userName;
      document.getElementById('sanction-confirm-reason').textContent = reason;
      
      const durationDisplay = document.getElementById('sanction-duration-display');
      if (type === 'timeout' && duration) {
        durationDisplay.textContent = `Duration: ${duration} hour${duration !== 1 ? 's' : ''}`;
        durationDisplay.classList.remove('hidden');
      } else {
        durationDisplay.classList.add('hidden');
      }
      
      showModal('sanction-confirm-modal');
      
      const confirmBtn = document.getElementById('confirm-sanction-confirm');
      const cancelBtn = document.getElementById('cancel-sanction-confirm');
      
      // Remove old listeners
      const newConfirmBtn = confirmBtn.cloneNode(true);
      confirmBtn.parentNode.replaceChild(newConfirmBtn, confirmBtn);
      const newCancelBtn = cancelBtn.cloneNode(true);
      cancelBtn.parentNode.replaceChild(newCancelBtn, cancelBtn);
      
      newCancelBtn.addEventListener('click', () => {
        hideModal('sanction-confirm-modal');
      });
      
      newConfirmBtn.addEventListener('click', async () => {
        hideModal('sanction-confirm-modal');
        await onConfirm();
      });
    }

    // Sanction success modal
    function showSanctionSuccessModal(type, userName) {
      const actionType = type === 'timeout' ? 'timed out' : 'permanently banned';
      const message = `User "${userName}" has been ${actionType} successfully.`;
      document.getElementById('sanction-success-message').textContent = message;
      showModal('sanction-success-modal');
      
      document.getElementById('close-sanction-success').addEventListener('click', () => {
        hideModal('sanction-success-modal');
      });
    }

    // Edit post function
    window.editPost = async function(postId, currentContent) {
      const modal = document.getElementById('edit-post-modal');
      const textarea = document.getElementById('edit-post-content');
      const confirmBtn = document.getElementById('confirm-edit-post');
      const cancelBtn = document.getElementById('cancel-edit-post');

      // Set current content
      textarea.value = currentContent;
      showModal('edit-post-modal');

      // Remove old listeners
      const newConfirmBtn = confirmBtn.cloneNode(true);
      confirmBtn.parentNode.replaceChild(newConfirmBtn, confirmBtn);
      const newCancelBtn = cancelBtn.cloneNode(true);
      cancelBtn.parentNode.replaceChild(newCancelBtn, cancelBtn);

      // Cancel handler
      newCancelBtn.addEventListener('click', () => {
        hideModal('edit-post-modal');
      });

      // Confirm handler
      newConfirmBtn.addEventListener('click', async () => {
        const newContent = textarea.value.trim();

        if (!newContent) {
          showError('Post content cannot be empty');
          return;
        }

        if (newContent === currentContent) {
          hideModal('edit-post-modal');
          return;
        }

        try {
          const res = await fetch(`/forum/posts/${postId}`, {
            method: 'PATCH',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ content: newContent })
          });

          const data = await res.json();
          if (!data.ok) throw new Error(data.error);

          hideModal('edit-post-modal');
          showSuccess('Post updated successfully');
          loadPosts(currentPage);
        } catch (err) {
          console.error('Error editing post:', err);
          hideModal('edit-post-modal');
          showError(`Failed to edit post: ${err.message}`);
        }
      });
    };

    // Delete post function
    window.deletePost = async function(postId) {
      const confirmBtn = document.getElementById('confirm-delete-post');
      const cancelBtn = document.getElementById('cancel-delete-post');

      showModal('delete-post-modal');

      // Remove old listeners
      const newConfirmBtn = confirmBtn.cloneNode(true);
      confirmBtn.parentNode.replaceChild(newConfirmBtn, confirmBtn);
      const newCancelBtn = cancelBtn.cloneNode(true);
      cancelBtn.parentNode.replaceChild(newCancelBtn, cancelBtn);

      // Cancel handler
      newCancelBtn.addEventListener('click', () => {
        hideModal('delete-post-modal');
      });

      // Confirm handler
      newConfirmBtn.addEventListener('click', async () => {
        try {
          const res = await fetch(`/forum/posts/${postId}`, {
            method: 'DELETE'
          });

          const data = await res.json();
          if (!data.ok) throw new Error(data.error);

          hideModal('delete-post-modal');
          showSuccess('Post deleted successfully');
          loadPosts(currentPage);
        } catch (err) {
          console.error('Error deleting post:', err);
          hideModal('delete-post-modal');
          showError(`Failed to delete post: ${err.message}`);
        }
      });
    };

    // Reply form
    const replyForm = document.getElementById('replyForm');
    if (replyForm) {
      replyForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const content = document.getElementById('replyContent').value;

        try {
          const res = await fetch(`/forum/threads/${threadId}/posts`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ content })
          });

          const data = await res.json();
          
          if (!data.ok) {
            throw new Error(data.error);
          }

          // Success! Clear form and reload
          document.getElementById('replyContent').value = '';
          showSuccess('Reply posted successfully');
          loadThread();
          loadPosts(currentPage);
        } catch (err) {
          console.error('Error posting reply:', err);
          showError(`Failed to post reply: ${err.message}`);
        }
      });
    }

    // Mod menu
    const modMenuBtn = document.getElementById('modMenuBtn');
    const modMenu = document.getElementById('modMenu');
    
    if (modMenuBtn && modMenu) {
      modMenuBtn.addEventListener('click', () => {
        modMenu.style.display = modMenu.style.display === 'none' ? 'block' : 'none';
      });

      // Close menu when clicking outside
      document.addEventListener('click', (e) => {
        if (!modMenuBtn.contains(e.target) && !modMenu.contains(e.target)) {
          modMenu.style.display = 'none';
        }
      });

      // Handle mod actions
      modMenu.querySelectorAll('[data-action]').forEach(btn => {
        btn.addEventListener('click', async () => {
          const action = btn.dataset.action;
          modMenu.style.display = 'none'; // Close menu
          
          // Special handling for delete - show confirmation modal
          if (action === 'delete') {
            const confirmBtn = document.getElementById('confirm-delete-thread');
            const cancelBtn = document.getElementById('cancel-delete-thread');
            
            showModal('delete-thread-modal');
            
            // Remove old listeners
            const newConfirmBtn = confirmBtn.cloneNode(true);
            confirmBtn.parentNode.replaceChild(newConfirmBtn, confirmBtn);
            const newCancelBtn = cancelBtn.cloneNode(true);
            cancelBtn.parentNode.replaceChild(newCancelBtn, cancelBtn);
            
            // Cancel handler
            newCancelBtn.addEventListener('click', () => {
              hideModal('delete-thread-modal');
            });
            
            // Confirm handler
            newConfirmBtn.addEventListener('click', async () => {
              hideModal('delete-thread-modal');
              await performModAction('delete');
            });
            return;
          }
          
          // For other actions (pin, unpin, lock, unlock), execute immediately
          await performModAction(action);
        });
      });
    }

    // Helper function to perform mod actions
    async function performModAction(action) {
      try {
        const res = await fetch(`/forum/threads/${threadId}/mod`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ action })
        });

        const data = await res.json();
        
        if (!data.ok) {
          throw new Error(data.error);
        }

        // Success!
        if (action === 'delete') {
          showSuccess('Thread deleted successfully');
          setTimeout(() => {
            window.location.href = '/forum';
          }, 1500);
        } else {
          const actionNames = {
            'pin': 'Thread pinned',
            'unpin': 'Thread unpinned',
            'lock': 'Thread locked',
            'unlock': 'Thread unlocked'
          };
          showSuccess(actionNames[action] || 'Action completed');
          setTimeout(() => {
            window.location.reload();
          }, 1500);
        }
      } catch (err) {
        console.error('Error performing mod action:', err);
        showError(`Failed: ${err.message}`);
      }
    }

    // BBCode Toolbar Functionality
    const bbcodeButtons = document.querySelectorAll('[data-bbcode]');
    const replyContent = document.getElementById('replyContent');
    
    bbcodeButtons.forEach(button => {
      button.addEventListener('click', () => {
        const tag = button.dataset.bbcode;
        const textarea = replyContent;
        const start = textarea.selectionStart;
        const end = textarea.selectionEnd;
        const selectedText = textarea.value.substring(start, end);
        let replacement = '';
        
        switch(tag) {
          case 'b':
          case 'i':
          case 'u':
          case 'code':
          case 'quote':
            replacement = `[${tag}]${selectedText || 'text'}[/${tag}]`;
            break;
          case 'url':
            const url = selectedText || prompt('Enter URL:');
            if (url) {
              const linkText = selectedText ? selectedText : prompt('Enter link text:') || url;
              replacement = `[url=${url}]${linkText}[/url]`;
            }
            break;
          case 'img':
            const imgUrl = selectedText || prompt('Enter image URL:');
            if (imgUrl) replacement = `[img]${imgUrl}[/img]`;
            break;
        }
        
        if (replacement) {
          textarea.value = textarea.value.substring(0, start) + replacement + textarea.value.substring(end);
          // Set cursor position after inserted text
          const newPos = start + replacement.length;
          textarea.focus();
          textarea.setSelectionRange(newPos, newPos);
        }
      });
    });

    // Make loadPosts available globally
    window.loadPosts = loadPosts;

    // User Sanction Modal Functions
    window.openSanctionModal = function(userId, userName) {
      document.getElementById('sanctionUserId').value = userId;
      document.getElementById('sanctionUserName').textContent = userName;
      document.getElementById('sanctionModal').style.display = 'flex';
    };

    window.closeSanctionModal = function() {
      document.getElementById('sanctionModal').style.display = 'none';
      document.getElementById('sanctionForm').reset();
    };

    // Toggle duration field based on sanction type
    const sanctionTypeSelect = document.getElementById('sanctionType');
    const durationField = document.getElementById('durationField');
    
    if (sanctionTypeSelect && durationField) {
      sanctionTypeSelect.addEventListener('change', (e) => {
        if (e.target.value === 'ban') {
          durationField.style.display = 'none';
          document.getElementById('sanctionDuration').removeAttribute('required');
        } else {
          durationField.style.display = 'block';
          document.getElementById('sanctionDuration').setAttribute('required', '');
        }
      });
    }

    // Sanction form submission
    const sanctionForm = document.getElementById('sanctionForm');
    if (sanctionForm) {
      sanctionForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const userId = document.getElementById('sanctionUserId').value;
        const type = document.getElementById('sanctionType').value;
        const reason = document.getElementById('sanctionReason').value;
        const duration = type === 'timeout' ? parseInt(document.getElementById('sanctionDuration').value) : null;
        const userName = document.getElementById('sanctionUserName').textContent;

        // Show confirmation modal
        showSanctionConfirmModal(type, userName, reason, duration, async () => {
          try {
            const res = await fetch(`/forum/threads/${threadId}/mod`, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ 
                action: type,
                target_user_id: userId,
                reason: reason,
                duration_hours: duration
              })
            });

            const data = await res.json();
            
            if (!data.ok) {
              throw new Error(data.error);
            }

            closeSanctionModal();
            showSanctionSuccessModal(type, userName);
          } catch (err) {
            console.error('Error applying sanction:', err);
            showErrorModal('Sanction Failed', err.message || 'Failed to apply sanction. Please try again.');
          }
        });
      });
    }

    // Modal close button handlers
    document.getElementById('close-success-modal')?.addEventListener('click', () => {
      hideModal('success-modal');
    });

    document.getElementById('close-error-modal')?.addEventListener('click', () => {
      hideModal('error-modal');
    });

    // Close modals when clicking outside
    document.getElementById('edit-post-modal')?.addEventListener('click', (e) => {
      if (e.target.id === 'edit-post-modal') {
        hideModal('edit-post-modal');
      }
    });

    document.getElementById('delete-post-modal')?.addEventListener('click', (e) => {
      if (e.target.id === 'delete-post-modal') {
        hideModal('delete-post-modal');
      }
    });

    document.getElementById('success-modal')?.addEventListener('click', (e) => {
      if (e.target.id === 'success-modal') {
        hideModal('success-modal');
      }
    });

    document.getElementById('error-modal')?.addEventListener('click', (e) => {
      if (e.target.id === 'error-modal') {
        hideModal('error-modal');
      }
    });

    document.getElementById('delete-thread-modal')?.addEventListener('click', (e) => {
      if (e.target.id === 'delete-thread-modal') {
        hideModal('delete-thread-modal');
      }
    });

    // Load on page load
    (async () => {
      await loadRoles(); // Load roles first for badge styling
      loadThread();
    })();
  </script>
</body>
</html>
